[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\coreu\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\coreu\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.2 (Oracle Corporation Java 21.0.1)
[debug] Load.defaultLoad until apply took 98.4905ms
[debug]                 Load.loadUnit: plugins took 88.4351ms
[debug]                 Load.loadUnit: defsScala took 0.3351ms
[debug] [Loading] Scanning directory C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.3939 ms
[debug]                     Load.resolveProject(se_kitty_card-build-build) took 54.2272ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id se_kitty_card-build-build, base: C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project\project, plugins: List(<none>))) took 98.047ms
[debug] [Loading] Done in C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project\project, returning: (se_kitty_card-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 120.4154ms
[debug]                 Load.loadUnit: cleanEvalClasses took 0.4861ms
[debug]               Load.loadUnit(file:/C:/Users/coreu/Documents/%23Studium/Software%20Engineering/SE_Kitty_Card/project/project/, ...) took 218.9108ms
[debug]             Load.apply: load took 399.8113ms
[debug]             Load.apply: resolveProjects took 5.19ms
[debug]             Load.apply: finalTransforms took 63.6758ms
[debug]             Load.apply: config.delegates took 6.1807ms
[debug]             Load.apply: Def.make(settings)... took 354.6062ms
[debug]             Load.apply: structureIndex took 89.0007ms
[debug]             Load.apply: mkStreams took 1.1854ms
[info] loading project definition from C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]           Load.loadUnit: plugins took 2260.967ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project
[debug]             Load.loadUnit: mkEval took 3.9792ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1454 ms
[info] loading settings for project se_kitty_card-build from idea.sbt ...
[debug]               Load.resolveProject(se_kitty_card-build) took 2.889ms
[debug]             Load.loadTransitive: finalizeProject(Project(id se_kitty_card-build, base: C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project, plugins: List(<none>))) took 4.4308ms
[debug] [Loading] Done in C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project, returning: (se_kitty_card-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2353.0956ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.5283ms
[debug]         Load.loadUnit(file:/C:/Users/coreu/Documents/%23Studium/Software%20Engineering/SE_Kitty_Card/project/, ...) took 4619.5013ms
[debug]       Load.apply: load took 4621.5403ms
[debug]       Load.apply: resolveProjects took 0.1523ms
[debug]       Load.apply: finalTransforms took 10.9215ms
[debug]       Load.apply: config.delegates took 0.5368ms
[debug]       Load.apply: Def.make(settings)... took 81.673ms
[debug]       Load.apply: structureIndex took 24.1502ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 5048.2732ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card
[debug]       Load.loadUnit: mkEval took 0.3105ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2659 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 18.2781ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card, plugins: List(<none>))) took 20.5574ms
[debug] [Loading] Done in C:\Users\coreu\Documents\#Studium\Software Engineering\SE_Kitty_Card, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1146.2291ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.3209ms
[debug]   Load.loadUnit(file:/C:/Users/coreu/Documents/%23Studium/Software%20Engineering/SE_Kitty_Card/, ...) took 6205.6448ms
[debug] Load.apply: load took 6226.7788ms
[debug] Load.apply: resolveProjects took 0.0865ms
[debug] Load.apply: finalTransforms took 26.9408ms
[debug] Load.apply: config.delegates took 0.3916ms
[debug] Load.apply: Def.make(settings)... took 78.9379ms
[debug] Load.apply: structureIndex took 40.7328ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to SE_Kitty_Card_1 (in build file:/C:/Users/coreu/Documents/%23Studium/Software%20Engineering/SE_Kitty_Card/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
